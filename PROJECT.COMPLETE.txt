#include <BluetoothSerial.h>
#include <WiFi.h>
#include <EEPROM.h>
#include <WebServer.h>

BluetoothSerial SerialBT;
WebServer server(80);

// Motor Pins
const int MOTOR_IN1 = 5;
const int MOTOR_IN2 = 18;
unsigned long MOTOR_RUN_TIME = 8000; // default 8 sec
bool isMotorRunning = false;
unsigned long motorStartMillis = 0;
String currentDirection = "";
String lockState = "UNLOCKED";

// LED Pins
const int LED_FORWARD = 2;
const int LED_BACKWARD = 4;
const int LED_SLEEP = 21;
const int LED_CHARGING = 15;
const int CHARGING_PIN = 34;

// Buttons
const int LOCK_BUTTON = 32;
const int UNLOCK_BUTTON = 33;
int lastLockState = HIGH;
int lastUnlockState = HIGH;

// Buzzer
const int BUZZER_PIN = 19;

// Security
char bluetoothPin[7] = "902736";        // default Bluetooth PIN
char wifiPassword[20] = "48364836";     // default WiFi PIN
char newBluetoothPin[7] = "";
char newWiFiPassword[20] = "";
const char* ssid = "SMART DOOR LOCK";

// EEPROM
const int EEPROM_SIZE = 128;
const int EEPROM_ADDR_MOTOR_TIME = 0;
const int EEPROM_ADDR_BT_PIN = 8;
const int EEPROM_ADDR_WIFI_PIN = 32;
const int EEPROM_ADDR_LOCK_STATE = 60;

// Sleep
bool isSleepMode = false;
unsigned long lastActivityTime = 0;
const unsigned long SLEEP_TIMEOUT = 600000; // 10 min

// Charging blink
unsigned long lastBlinkTime = 0;
bool previousChargingState = false;

// ---------------- Helper Functions -----------------
void beepBuzzer(int beeps){
  for(int i=0;i<beeps;i++){
    digitalWrite(BUZZER_PIN,HIGH);
    delay(100);
    digitalWrite(BUZZER_PIN,LOW);
    if(i<beeps-1) delay(100);
  }
}

// ---------------- Motor Functions -----------------
void startMotor(bool isLock){
  if(isMotorRunning) return;
  if(isLock && lockState=="LOCKED") return;
  if(!isLock && lockState=="UNLOCKED") return;

  if(isLock){
    digitalWrite(MOTOR_IN1,HIGH);
    digitalWrite(MOTOR_IN2,LOW);
    digitalWrite(LED_FORWARD,HIGH);
    digitalWrite(LED_BACKWARD,LOW);
    currentDirection="LOCK";
    lockState="TRANSITIONING";
  } else {
    digitalWrite(MOTOR_IN1,LOW);
    digitalWrite(MOTOR_IN2,HIGH);
    digitalWrite(LED_FORWARD,LOW);
    digitalWrite(LED_BACKWARD,HIGH);
    currentDirection="UNLOCK";
    lockState="TRANSITIONING";
  }

  motorStartMillis = millis();
  isMotorRunning=true;
}

void stopMotor(){
  digitalWrite(MOTOR_IN1,LOW);
  digitalWrite(MOTOR_IN2,LOW);
  digitalWrite(LED_FORWARD,LOW);
  digitalWrite(LED_BACKWARD,LOW);
  isMotorRunning=false;
  beepBuzzer(2);
  if(currentDirection=="LOCK"){
    lockState="LOCKED";
    EEPROM.write(EEPROM_ADDR_LOCK_STATE,1);
  } else {
    lockState="UNLOCKED";
    EEPROM.write(EEPROM_ADDR_LOCK_STATE,0);
  }
  EEPROM.commit();
}

// ---------------- Sleep / Charging -----------------
void updateSleepLED(){
  if(isSleepMode) digitalWrite(LED_SLEEP,HIGH);
  else {
    static unsigned long lastBlink=0;
    if(millis()-lastBlink>500){
      digitalWrite(LED_SLEEP,!digitalRead(LED_SLEEP));
      lastBlink=millis();
    }
  }
}

void checkCharging(){
  bool currentChargingState = digitalRead(CHARGING_PIN)==HIGH;
  if(currentChargingState != previousChargingState){
    previousChargingState = currentChargingState;
  }
  if(currentChargingState){
    if(millis()-lastBlinkTime>250){
      digitalWrite(LED_CHARGING,!digitalRead(LED_CHARGING));
      lastBlinkTime=millis();
    }
  } else {
    digitalWrite(LED_CHARGING,LOW);
  }
}

// ---------------- Web Interface -----------------
String webPageHtml(){
  String p="<html><head><meta name='viewport' content='width=device-width,initial-scale=1'>";
  p+="<title>Door Lock Control</title>";
  p+="<style>body{background:#111;color:#fff;font-family:Arial;text-align:center;padding:18px;} ";
  p+="h1{font-size:28px;margin:8px 0;} .btn{display:inline-block;padding:18px 28px;margin:10px;font-size:20px;border-radius:12px;border:none;color:#fff;cursor:pointer;} ";
  p+=".lock{background:#d32f2f;} .unlock{background:#2e7d32;} .syson{background:#0277bd;} .sysoff{background:#6d6d6d;} ";
  p+=".status{margin-top:20px;font-size:20px;} .small{font-size:14px;color:#aaa;margin-top:6px;} </style></head><body>";
  p+="<h1>Door Lock Control</h1>";
  p+="<div><button class='btn lock' onclick=\"fetch('/lock')\">LOCK</button>";
  p+="<button class='btn unlock' onclick=\"fetch('/unlock')\">UNLOCK</button></div>";
  p+="<div style='margin-top:12px;'><button class='btn syson' onclick=\"fetch('/system_on')\">SYSTEM ON</button>";
  p+="<button class='btn sysoff' onclick=\"fetch('/system_off')\">SYSTEM OFF</button></div>";
  p+="<div class='status'>Status: "+lockState+" | System: ON</div>";
  p+="<div class='small'>IP: 192.168.4.1 ‚Äî Connect to hotspot and open in Chrome</div>";
  p+="</body></html>";
  return p;
}

void handleRoot(){server.send(200,"text/html",webPageHtml());}
void handleLock(){startMotor(true);server.sendHeader("Location","/");server.send(303);}
void handleUnlock(){startMotor(false);server.sendHeader("Location","/");server.send(303);}
void handleSystemOn(){server.sendHeader("Location","/");server.send(303);}
void handleSystemOff(){server.sendHeader("Location","/");server.send(303);}

// ---------------- Setup -----------------
void setup(){
  Serial.begin(115200);

  // pins
  pinMode(MOTOR_IN1,OUTPUT);
  pinMode(MOTOR_IN2,OUTPUT);
  pinMode(LED_FORWARD,OUTPUT);
  pinMode(LED_BACKWARD,OUTPUT);
  pinMode(LED_SLEEP,OUTPUT);
  pinMode(LED_CHARGING,OUTPUT);
  pinMode(LOCK_BUTTON,INPUT_PULLUP);
  pinMode(UNLOCK_BUTTON,INPUT_PULLUP);
  pinMode(BUZZER_PIN,OUTPUT);
  pinMode(CHARGING_PIN,INPUT);

  EEPROM.begin(EEPROM_SIZE);
  
  // load lock state
  byte saved = EEPROM.read(EEPROM_ADDR_LOCK_STATE);
  lockState = (saved==1)?"LOCKED":"UNLOCKED";

  // load motor time if saved
  EEPROM.get(EEPROM_ADDR_MOTOR_TIME,MOTOR_RUN_TIME);

  // üî• 4 ‡§≤‡§æ‡§á‡§®‡•á‡§Ç ‡§ú‡•ã 1% ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•ã ‡§ñ‡§§‡•ç‡§Æ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•Ä: EEPROM ‡§ï‡•Ä ‡§ó‡§≤‡§§ ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§ï‡•ã ‡§†‡•Ä‡§ï ‡§ï‡§∞‡§®‡§æ üî•
  // ‡§Ö‡§ó‡§∞ MOTOR_RUN_TIME ‡§ó‡§≤‡§§ (‡§ï‡§ö‡§∞‡§æ/‡§¨‡§π‡•Å‡§§ ‡§¨‡•ú‡•Ä) ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§†‡•Ä‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§
  if (MOTOR_RUN_TIME < 1000 || MOTOR_RUN_TIME > 60000) { 
      // 8000ms ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
      MOTOR_RUN_TIME = 8000;
      EEPROM.put(EEPROM_ADDR_MOTOR_TIME, MOTOR_RUN_TIME);
      EEPROM.commit();
  }
  // üî•üî•üî•üî•üî•üî•üî•üî•üî•

  // Bluetooth
  SerialBT.begin("SECURITY DOOR LOCK");
  beepBuzzer(2);

  // WiFi AP
  WiFi.softAP(ssid,wifiPassword);
  delay(250);
  Serial.print("Hotspot IP: "); Serial.println(WiFi.softAPIP());

  // Web server
  server.on("/",handleRoot);
  server.on("/lock",handleLock);
  server.on("/unlock",handleUnlock);
  server.on("/system_on",handleSystemOn);
  server.on("/system_off",handleSystemOff);
  server.begin();

  lastActivityTime=millis();
}

// ---------------- Loop -----------------
void loop(){
  checkCharging();
  server.handleClient();

  // Bluetooth commands with PIN/password support
  if(SerialBT.available()){
    lastActivityTime=millis();
    String cmd = SerialBT.readStringUntil('\n'); cmd.trim();
    
    if(cmd.startsWith("LOCK:")){
      String p = cmd.substring(5);
      if(p.equals(String(bluetoothPin)) || p.equals(String(newBluetoothPin))) startMotor(true);
      else beepBuzzer(1);
    } 
    else if(cmd.startsWith("UNLOCK:")){
      String p = cmd.substring(7);
      if(p.equals(String(bluetoothPin)) || p.equals(String(newBluetoothPin))) startMotor(false);
      else beepBuzzer(1);
    } 
    else if(cmd.startsWith("TIME:")){
      unsigned long t = cmd.substring(5).toInt();
      if(t>=1){ 
        MOTOR_RUN_TIME = t;
        EEPROM.put(EEPROM_ADDR_MOTOR_TIME,MOTOR_RUN_TIME);
        EEPROM.commit();
        SerialBT.println("Motor time updated: "+String(MOTOR_RUN_TIME)+" ms");
        beepBuzzer(1);
      }
    } 
    else if(cmd.startsWith("SET_PIN:")){
      String pins = cmd.substring(8);
      int sep = pins.indexOf(':');
      if(sep>0){
        String oldPin = pins.substring(0,sep);
        String newPin = pins.substring(sep+1);
        if(oldPin.equals(String(bluetoothPin))){
          strncpy(newBluetoothPin,newPin.c_str(),7);
          SerialBT.println("Bluetooth PIN updated");
          beepBuzzer(2);
        } else beepBuzzer(1);
      }
    }
    else if(cmd.startsWith("SET_WIFI_PIN:")){
      String pins = cmd.substring(13);
      int sep = pins.indexOf(':');
      if(sep>0){
        String oldPin = pins.substring(0,sep);
        String newPin = pins.substring(sep+1);
        if(oldPin.equals(String(wifiPassword))){
          strncpy(newWiFiPassword,newPin.c_str(),20);
          WiFi.softAP(ssid,newWiFiPassword);
          SerialBT.println("WiFi PIN updated");
          beepBuzzer(2);
        } else beepBuzzer(1);
      }
    }
    else beepBuzzer(1);
  }

  // Physical buttons
  int lockBtn=digitalRead(LOCK_BUTTON);
  int unlockBtn=digitalRead(UNLOCK_BUTTON);
  if(lockBtn==LOW && lastLockState==HIGH && !isMotorRunning) startMotor(true);
  if(unlockBtn==LOW && lastUnlockState==HIGH && !isMotorRunning) startMotor(false);
  lastLockState=lockBtn;
  lastUnlockState=unlockBtn;

  // Motor auto stop
  if(isMotorRunning && (millis()-motorStartMillis>=MOTOR_RUN_TIME)) stopMotor();

  // Sleep timeout
  if(!isSleepMode && (millis()-lastActivityTime>SLEEP_TIMEOUT)){
    isSleepMode=true;
    digitalWrite(LED_SLEEP,HIGH);
    SerialBT.end();
    WiFi.softAPdisconnect(true);
  }

  updateSleepLED();
  delay(20);
}